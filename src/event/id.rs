use nix::unistd::{Pid, getpid, gettid};

/// A thread or process id.
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum Id {
    Pid(Pid),
    Tid(Pid),
}

impl Id {
    /// The process id if this contains one.
    pub fn pid(&self) -> Option<Pid> {
        match self {
            Self::Pid(pid) => Some(*pid),
            Self::Tid(_) => None,
        }
    }
    
    /// The thread id if this contains one.
    pub fn tid(&self) -> Option<Pid> {
        match self {
            Self::Pid(_) => None,
            Self::Tid(tid) => Some(*tid),
        }
    }
    
    /// The current thread or process id,
    /// as returned by [`getpid(2)`](https://man7.org/linux/man-pages/man2/getpid.2.html)
    /// or [`gettid(2)`](https://man7.org/linux/man-pages/man2/gettid.2.html).
    pub fn current(use_tid: bool) -> Self {
        if use_tid {
            Self::Tid(gettid())
        } else {
            Self::Pid(getpid())
        }
    }
}

/// The thread of process id of an event (see [`Id`]).
#[derive(Debug)]
pub struct EventId {
    /// Whether this event was generated by the same thread or process that read the events.
    pub(super) is_generated_by_self: bool,
    pub(super) id: Id,
}

impl EventId {
    pub fn is_generated_by_self(&self) -> bool {
        self.is_generated_by_self
    }
    
    pub fn id(&self) -> Id {
        self.id
    }
    
    /// The process id if this contains one.
    pub fn pid(&self) -> Option<Pid> {
        self.id.pid()
    }
    
    /// The thread id if this contains one.
    pub fn tid(&self) -> Option<Pid> {
        self.id.tid()
    }
}
